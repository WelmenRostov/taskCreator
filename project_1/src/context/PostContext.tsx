import { type FC, type ReactNode, useEffect, useState } from 'react';
import type { Post } from '../types/types';
import { PostContext } from './usePostContext';

export const PostProvider: FC<{ children: ReactNode }> = ({ children }) => {
  const storedPosts = (() => {
    try {
      const raw = localStorage.getItem('posts');
      if (!raw) return null;

      const parsed = JSON.parse(raw);
      if (!Array.isArray(parsed)) return null;

      return parsed.map((post: Post) => ({
        ...post,
        data: new Date(post.data),
      }));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è localStorage:', error);
      return null;
    }
  })();

  const defaultPosts: Post[] = [
    {
      id: 1,
      count: 1,
      title: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
      text: '–ü–æ–ª–µ –≤–≤–æ–¥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏.\n–ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å", –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫.',
      data: new Date(10000),
      status: 'pending',
    },
    {
      id: 2,
      count: 2,
      title: '–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á',
      text: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é.\n–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞.',
      data: new Date(300000),
      status: 'pending',
    },
    {
      id: 3,
      count: 3,
      title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏',
      text: '–î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏.\n–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏.',
      data: new Date(600000),
      status: 'editor',
    },
    {
      id: 4,
      count: 4,
      title: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á',
      text: '–ë–µ—Ç—Ç–∞',
      data: new Date(900000),
      status: 'pending',
    },
    {
      id: 5,
      count: 5,
      title: '–ì–∞–º–º–∞',
      text: '–ó–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ localStorage –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.',
      data: new Date(1200000),
      status: 'pending',
    },
  ];

  // üîß –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [posts, setPosts] = useState<Post[]>(storedPosts || defaultPosts);
  const [modal, setModal] = useState<boolean>(false);

  useEffect(() => {
    localStorage.setItem('posts', JSON.stringify(posts));
  }, [posts]);

  const updatePost = (id: number, updatedPost: Post) => {
    setPosts((prevPosts) => prevPosts.map((post) => (post.id === id ? updatedPost : post)));
  };

  const updateStatus = (id: number, updatedPost: Post) => {
    setPosts((prevPosts) => prevPosts.map((post) => (post.id === id ? { ...post, status: updatedPost.status } : post)));
  };
  const handleAddPost = (post: Post) => {
    setPosts((prev) => [...prev, post]);
    setModal(false);
  };

  const handleSave = (post: Post) => {
    setPosts((prev) => {
      const index = prev.findIndex((p) => p.id === post.id);
      if (index !== -1) {
        const updated = [...prev];
        updated[index] = post;
        return updated;
      } else {
        return [...prev, post];
      }
    });
  };

  const removePost = (id: number) => {
    setPosts((prev) => prev.filter((p) => p.id !== id));
  };

  return (
    <PostContext.Provider
      value={{
        posts,
        modal,
        setModal,
        handleSave,
        handleAddPost,
        removePost,
        updatePost,
        updateStatus,
      }}
    >
      {children}
    </PostContext.Provider>
  );
};
